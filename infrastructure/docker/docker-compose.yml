version: '3.8'

services:
  # API service
  api:
    image: nginx:alpine
    container_name: vpn-api
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ../../backend/logs:/var/log/nginx
    networks:
      - vpn-network

  # WireGuard VPN service
  wireguard:
    image: linuxserver/wireguard:latest
    container_name: vpn-wireguard
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=UTC
      - SERVERURL=54.254.241.55
      - SERVERPORT=51820
      - PEERS=1
      - PEERDNS=1.1.1.1,8.8.8.8
      - PEER1_NAME=test-client
    volumes:
      - ../../backend/data/wg_configs:/config
    ports:
      - "51820:51820/udp"
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    restart: unless-stopped
    networks:
      - vpn-network

  # Database service
  db:
    image: postgres:14
    container_name: vpn-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=vpn_service
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - vpn-network

  # Nginx service
  nginx:
    image: nginx:latest
    container_name: vpn-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../nginx/conf.d:/etc/nginx/conf.d
      - ../nginx/ssl:/etc/nginx/ssl
      - ../../backend/logs/nginx:/var/log/nginx
    depends_on:
      - api
    networks:
      - vpn-network

  # Monitoring service
  prometheus:
    image: prom/prometheus:latest
    container_name: vpn-prometheus
    restart: unless-stopped
    volumes:
      - ../monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - vpn-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: vpn-grafana
    restart: unless-stopped
    volumes:
      - ../monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ../monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    networks:
      - vpn-network

  # Redis for caching and session management
  redis:
    image: redis:alpine
    container_name: vpn-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - vpn-network
      
  # Node exporter for host metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: vpn-node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - vpn-network
      
  # Redis exporter for Redis metrics
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: vpn-redis-exporter
    restart: unless-stopped
    environment:
      - REDIS_ADDR=redis://redis:6379
    ports:
      - "9121:9121"
    depends_on:
      - redis
    networks:
      - vpn-network

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
  redis_data:

networks:
  vpn-network:
    driver: bridge
